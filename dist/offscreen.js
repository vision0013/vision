import{g as w}from"./assets/ai-controller.js";const g="modulepreload",y=function(o){return"/"+o},l={},q=function(t,d,m){let e=Promise.resolve();if(d&&d.length>0){document.getElementsByTagName("link");const r=document.querySelector("meta[property=csp-nonce]"),s=(r==null?void 0:r.nonce)||(r==null?void 0:r.getAttribute("nonce"));e=Promise.allSettled(d.map(c=>{if(c=y(c),c in l)return;l[c]=!0;const i=c.endsWith(".css"),f=i?'[rel="stylesheet"]':"";if(document.querySelector(`link[href="${c}"]${f}`))return;const a=document.createElement("link");if(a.rel=i?"stylesheet":g,i||(a.as="script"),a.crossOrigin="",a.href=c,s&&a.setAttribute("nonce",s),document.head.appendChild(a),i)return new Promise((h,I)=>{a.addEventListener("load",h),a.addEventListener("error",()=>I(new Error(`Unable to preload CSS for ${c}`)))})}))}function n(r){const s=new Event("vite:preloadError",{cancelable:!0});if(s.payload=r,window.dispatchEvent(s),!s.defaultPrevented)throw r}return e.then(r=>{for(const s of r||[])s.status==="rejected"&&n(s.reason);return t().catch(n)})},u=new Set;async function M(){try{let o=w();chrome.runtime.onMessage.addListener((t,d,m)=>{if(console.log(" M [offscreen] Received message:",t),t.requestId){if(u.has(t.requestId)){console.warn(`⚠️ [offscreen] Duplicate request ID ignored: ${t.requestId}`);return}u.add(t.requestId),console.log(`🔖 [offscreen] Processing new request: ${t.requestId}`)}else console.warn("⚠️ [offscreen] Message without requestId - potential duplicate source:",t.action);switch(t.action){case"initializeAI":(async()=>{try{const e=await o.initialize(),n=await o.getModelStatus();chrome.runtime.sendMessage({action:"aiInitialized",requestId:t.requestId,success:e,status:n})}catch(e){chrome.runtime.sendMessage({action:"aiInitialized",requestId:t.requestId,success:!1,error:e.message,status:{state:1,error:e.message}})}})();break;case"getModelStatus":(async()=>{try{const e=await o.getModelStatus();chrome.runtime.sendMessage({action:"modelStatusResponse",requestId:t.requestId,status:e})}catch(e){chrome.runtime.sendMessage({action:"modelStatusResponse",requestId:t.requestId,status:{isLoaded:!1,isLoading:!1,error:e.message}})}})();break;case"downloadModel":(async()=>{try{if(!t.token)throw new Error("API token is missing.");const e=await o.downloadAndCacheModelAsPath(t.token),n=o.getModelStatus();chrome.runtime.sendMessage({action:"modelLoaded",success:e,status:n})}catch(e){chrome.runtime.sendMessage({action:"modelLoaded",success:!1,error:e.message})}})();break;case"deleteModel":(async()=>{try{await o.deleteCachedModel(),chrome.runtime.sendMessage({action:"modelDeleted",success:!0,status:o.getModelStatus()})}catch(e){chrome.runtime.sendMessage({action:"modelDeleted",success:!1,error:e.message})}})();break;case"analyzeIntent":(async()=>{try{const e=t.command||t.voiceInput,n=t.crawledItems,r=t.mode;if(!e||!n)throw new Error("Command or crawledItems is missing in analyzeIntent request.");const s=await o.analyzeIntent(e,n,r);chrome.runtime.sendMessage({action:"analysisResult",requestId:t.requestId,result:s})}catch(e){chrome.runtime.sendMessage({action:"analysisResult",requestId:t.requestId,error:e.message})}})();break;case"modelSwitched":(async()=>{const e=t.modelId;console.log(`🎯 [offscreen] Received model switch notification: ${e}`);const{setCurrentActiveModel:n,getAIController:r}=await q(async()=>{const{setCurrentActiveModel:s,getAIController:c}=await import("./assets/ai-controller.js").then(i=>i.a);return{setCurrentActiveModel:s,getAIController:c}},[]);n(e),o=r(e),console.log(`✅ [offscreen] Active model updated to: ${e}`)})();break}}),chrome.runtime.sendMessage({action:"offscreenReady"})}catch(o){chrome.runtime.sendMessage({action:"offscreenError",error:o.message})}}M();
